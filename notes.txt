Following -> 
First video

https://www.youtube.com/watch?v=y8wiSB7VuEE&list=PLUPlX-9QUIrMZsnv69WfCiF15PJUV84Gj&index=2

First create repo on github.
second clone it using gitbash.

Muhammad Usama@Waseem-Automation MINGW64 ~/desktop
$ git clone https://github.com/Wasim10/CYPRESS-E2E.git

Third open that in vs code.

Forth open terminal and install CYPRESS.
PS C:\Users\Muhammad Usama\Desktop\CYPRESS-E2E> npm init

Then
PS C:\Users\Muhammad Usama\Desktop\CYPRESS-E2E> npm install cypress --save-dev 

Open cypress
PS C:\Users\Muhammad Usama\Desktop\CYPRESS-E2E> npx cypress open

---------------------------------------------------------------
Now POM Page object Model works Start

1. create a folder name 'pages' in main cypress-E2E
2. create a folder name 'tests' in the e2e folder

will automate this site https://naveenautomationlabs.com/opencart/

3. create a file name 'registerpage.js' in the pages folder
add locators there check file for details
class registerPage{
     // define all the locators there in weblocators object
    weblocators={
       
        firstName:'#input-firstname',
        lastName:'#input-lastname',
        email:'input-email',
        telephone:'#input-telephone',
        password:'#input-password',
        passwordConfirm:'#input-confirm',
        policyCheckbox:'input[type="checkbox"]',
        continue:'.btn.btn-primary'

    }

      // enter first naem method

   // we are getting URl from e2e file , env 
      OpenUrl(){
        cy.visit(Cypress.env('URL'))
      }

      enterFirstName(FName) {
    cy.get(this.weblocators.firstName).type(FName)
}

enterLastName(LName) {
    cy.get(this.weblocators.lastName).type(LName)
}

enterEmail(Email) {
    cy.get(this.weblocators.email).type(Email)
}

enterTelephone(Telephone) {
    cy.get(this.weblocators.telephone).type(Telephone)
}

enterPassword(Password) {
    cy.get(this.weblocators.password).type(Password)
}

enterPasswordConfirm(ConfirmPassword) {
    cy.get(this.weblocators.passwordConfirm).type(ConfirmPassword)
}

checkPolicy() {
    cy.get(this.weblocators.policyCheckbox).check()
}

clickContinue() {
    cy.get(this.weblocators.continue).click()
}

  

}


4. Goto cypress.config.js to creat a env variable
add this under e2e brackets 
  env:{
    URL: 'https://naveenautomationlabs.com/opencart/'
  }

use that env Url in out registerPage to visit site
// we are getting URl from e2e file , env 
      OpenUrl(){
        cy.visit(Cypress.env('URL'))
      }


5. Create a file name 'registerTest.cy.js' inside the e2e/tests folder

To Import registerPage.js file in our registerTest.cy.js,
use export keyword 
e.g
export class registerPage(){

}

now goto registerTest.cy.js add below
import  {registerPage} from "../../pages/registerPage"


const registerObj = new registerPage()

describe('test automation' , ()=>{
    it('register flow',()=>{
        registerObj.openURL()
        registerObj.firstName( we will get the firstName and fields data from fixtures)


    })
})

Goto -> fixtures  and creat file with name registerData.json


define all with values like that
{
  "firstName": "test",
  "lastName": "user",
  "email": "test.user@example.com",
  "telephone": "1234567890",
  "password": "Password123",
  "passwordConfirm": "Password123",
  "policyCheckbox": true,
  "continue": true
}


Next go back registerTest.cy.js and use above values

describe('test automation', () => {
    it('register flow', () => {
        registerObj.openURL()
        registerObj.enterFirstName(registerData.firstName)
        registerObj.enterLastName(registerData.lastName)
        registerObj.enterEmail(registerData.email)
        registerObj.enterTelephone(registerData.telephone)
        registerObj.enterPassword(registerData.password)
        registerObj.enterPasswordConfirm(registerData.passwordConfirm)
        registerObj.checkPolicy()
        registerObj.clickContinue()
    })
})


Run commad npx cypress open 
and check the above flow is working or not

its working
through this way we can do multiple features testing using POM

Now Push code to github
git status
git add .
git commit -m "test E2E Cypress"
git push


Code pushed successfully .

===================================================================


Second video

https://www.youtube.com/watch?v=EqDIbK0mmhE&list=PLUPlX-9QUIrMZsnv69WfCiF15PJUV84Gj&index=3

Start from this video

In this video we will cover 
1. commands.js, Add to cart flow
2. Run test case in headless Model
3. Run test case using script
4. Generate HTML report, Mochawsome

1) Goto commands.js inside the support folder.
commands.js is used to define custom reusable commands

Goto commands.js inside the Support folder
Make a custom command 

I have added the login custom command
Cypress.Commands.add('login', (email,passowrd)=>{
  //  cy.visit('')
    cy.visit(Cypress.env('LoginURL'))
    cy.get('#input-email').type(email)
    cy.get('#input-password').type(passowrd)
    cy.get('input.btn.btn-primary').click()
})

2) Create a new page inside pages with name homePage.js and add the following code 

export class homePage {


    weblocators = {

        search_input: '.form-control.input-lg',
        click_search: '.btn.btn-default.btn-lg',
        product: 'img[title="MacBook"]',
        addtocart: 'Add to Cart',
        successMessages: 'div.alert.alert-success.alert-dismissible'


    }

    searchProduct(productName) {
        cy.get(this.weblocators.search_input).type(productName)
        cy.get(this.weblocators.click_search).click()
    }
    addToCart() {
        cy.contains(this.weblocators.addtocart).first().click()
    }

    verifySucessMessage() {
        return cy.get(this.weblocators.successMessages)
    }

}

3) Next create a addToCartTest.cy.js file inside the e2e/tests

add the following code

import { homePage } from "../../pages/homePage"
const homePageObj = new homePage()
import testData from '../../fixtures/testData.json'


describe(' test automation', () => {
    before(() => {
        cy.login(testData.login.username, testData.login.password)
    })


    it('Add To Cart flow', () => {
        homePageObj.searchProduct(testData.product.productName)
        homePageObj.addToCart()
        homePageObj.verifySucessMessage().should('contain', testData.message.successMessage).and('contain', testData.product.productName);
    })

    after(() => {
        cy.captureConsoleLogs();

    })
})

4) Goto fixtures folder and create a file 'testData.json' for data and paste this

{
  "login": 
  {
    "username": "test.qa@dispostable.com",
    "password": "Cypress123!!"
  },
  "product": 
  {
    "productName": "MacBook"
  },
  "message":
  {
    "successMessage": "Success: You have added MacBook to your shopping cart!"
  }
  
}

5) Run the test and check
add this
PS C:\Users\Muhammad Usama\Desktop\CYPRESS-E2E> npm install --save-dev cypress-terminal-report
then this in cypress.config.js
const installLogsPrinter = require('cypress-terminal-report/src/installLogsPrinter');

and this In cypress/support/e2e.js:

RUn and check again

successfully done.

-----------------------------------------------------------------
14:40
In this section we will Run our Test in headless way

1) Use below command for headless test run (it will run and test all the test classes)
PS C:\Users\Muhammad Usama\Desktop\CYPRESS-E2E> npx cypress run

Run a single test file
npx cypress run --spec "cypress/e2e/tests/addToCartTest.cy.js"

2) Run test using script in headless Mode

Goto Package.json file 
and goto scripts section

Add this
  "scripts": {  // in script tags add the addToCartHeadless
    "test:addToCartHeadless":"npx cypress run --spec cypress/e2e/tests/addToCart.cy.js",
    "test": "echo \"Error: no test specified\" && exit 1"
  },

  goto terminal and use above to run
PS C:\Users\Muhammad Usama\Desktop\CYPRESS-E2E> npm run test:addToCartHeadless 

Run successfully


---------------------------------------------------------------------------------
22:10
In this section we will Generate the Html Report for our testacases

1) install cypress-mochawesome-reporter

npm i --save-dev cypress-mochawesome-reporter

2) Change cypress reporter & setup hooks

Edit config file (cypress.config.js by default)
Add below in e2e section{}
require('cypress-mochawesome-reporter/plugin')(on);

and

add this above of e2e section
  reporter: 'cypress-mochawesome-reporter',

e.g

  reporter: 'cypress-mochawesome-reporter',
  e2e: {
    setupNodeEvents(on, config) {
      require('cypress-mochawesome-reporter/plugin')(on);
    },


3) Add to cypress/support/e2e.js

import 'cypress-mochawesome-reporter/register';


4) Run the test case and it will automatically generate the report 
PS C:\Users\Muhammad Usama\Desktop\CYPRESS-E2E> npm run test:addToCartHeadless

we can add these options to get a recorded video as well

"
module.exports = defineConfig({
  video: true,                  // ✅ belongs here, not inside reporterOptions
  videoUploadOnPasses: true,    // ✅
  videoCompression: 32,         // ✅
  reporter: 'cypress-mochawesome-reporter',
  reporterOptions: {
    reportDir: 'cypress/reports',
    charts: true,
    reportPageTitle: 'My Test Suite',
    embeddedScreenshots: true,
    inlineAssets: true,
    overwrite: false,
    html: true,
    json: true,
    timestamp: 'mmddyyyy_HHMMss',   // custom timestamp format
    quiet: false,
    reportFilename: 'my_custom_report',
    saveAllAttempts: true
  },
  e2e: {
    setupNodeEvents(on, config) {
      require('cypress-mochawesome-reporter/plugin')(on);
      return config;
    }
  }
});
"
Report Generated successfully
check here
C:\Users\Muhammad Usama\Desktop\CYPRESS-E2E\cypress\reports\html\index.html





=========================================================================================
GITHUB Actions

Third video

POM Series || E2E Test using GitHub Actions+Parallel Execution using GitHub Actions
https://www.youtube.com/watch?v=uqzV6BWaWfw&list=PLUPlX-9QUIrMZsnv69WfCiF15PJUV84Gj&index=4

In this video we will learn about

1. Run Cypress Test on CI/CD using github Actions
2. Run customized script on CI/CD using github Actions
3. Run CYPRESS Test on multiple browsers (chrome,firefox) using github Actions
4. Parallel Execution using GitHub Actions


1) Run all test cases
PS C:\Users\Muhammad Usama\Desktop\CYPRESS-E2E> mkdir .github

Goto to .github Directory
PS C:\Users\Muhammad Usama\Desktop\CYPRESS-E2E> cd .github

Make new Directory with name workflow
PS C:\Users\Muhammad Usama\Desktop\CYPRESS-E2E\.github> mkdir workflows

Create new file inside the workflows
build.yml

Goto the link and copy End-to-End Testing script and paste it inside the build.yml
https://github.com/cypress-io/github-action

DO it using git bash
now 
PS C:\Users\Muhammad Usama\Desktop\CYPRESS-E2E> git add .github/workflows/build.yml
git  file
then 
git push


Now goto github and click on Actions
the YML file and its Passed

successfully Passed


2) Run Specific Test cases
Create new yml file inside the .github/workflows

name it script-build.yml

copy the same code from build.yml file and paste it inside the script-build.yml file 

Add this only in End
    with:
            command: npm run test:addToCartHeadless


Changes implemented.
Now push them
a. git status
b. git add .github/workflows/script-build.yml
c. git commit -m "Script-Build file added for specfic test run"
d. git push


Goto Actions Tab and click on  "Script-Build file added for specfic test run"

----------------------------------------------------------------------------

3. Run CYPRESS Test on multiple browsers (chrome,firefox) using github Actions

creat a new file inside .github/workflows and name it
browser-build.yml

paste everything form build.yml and paste inside the browser-build.yml and below code in End
     with:
            browser: chrome


successfully Run

----------------------------------------------------------------------------------

4. Parallel Execution using GitHub Actions

goto Package.json and add this in scripts{} section
"test:registerFlow": "npx cypress run --spec cypress/e2e/tests/registerTest.cy.js",

Now
creat a new file inside workflows
Parallel-test.yml

add the basic script and change in below


e.g like this we are running two tests seprately but Parallely

we  have two jobs we below, we can add multiple

name: E2E Test on multiple browsers
on: push
jobs:
  cypress-run:
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      # Install npm dependencies, cache them correctly
      # and run all Cypress tests
      - name: Cypress run
        uses: cypress-io/github-action@v6
        with:
            command: npm run test:registerFlow  // this one

  register-flow-run:
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      # Install npm dependencies, cache them correctly
      # and run all Cypress tests
      - name: Cypress run
        uses: cypress-io/github-action@v6
        with:
            command: npm run addToCartHeadless       // this one      





add this in cypress.config.js under e2e
    specPattern: 'cypress/e2e/tests/**/*.cy.{js,ts}', // ✅ explicitly set test path

            push code to git 

            git add cypress.config.js
git commit -m "Fix Cypress config: add specPattern for CI"
git push origin main

successfully Run and Done






=========================================================================================
            video

            https://www.youtube.com/watch?v=LwEhfks9x1c&list=PLUPlX-9QUIrMZsnv69WfCiF15PJUV84Gj&index=5
#5 || Cypress E2E Web Automation || Uploading Report Folders to CI/CD

1)
Goto https://github.com/actions/upload-artifact

copy the below section code and paste it inside the build.yml where ever i required it
Upload an Entire Directory

- uses: actions/upload-artifact@v4
  with:
    name: my-artifact
    path: path/to/artifact/ # or path/to/artifact


    e.g

    name: Regression End-to-end tests
on: push
jobs:
  cypress-run:
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      # Install npm dependencies, cache them correctly
      # and run all Cypress tests
      - name: Cypress run
        uses: cypress-io/github-action@v6
 /// here below is our code for test report upload for build.yml
      - name: Cypress Test Report
        uses: actions/upload-artifact@v4
        with:
          name: Mochawsome Test Report
          path: path/to/artifact/ # or path/to/artifact



C:\Users\Muhammad Usama\Desktop\CYPRESS-E2E\cypress\reports\my_custom_report_09132025_215656.html






